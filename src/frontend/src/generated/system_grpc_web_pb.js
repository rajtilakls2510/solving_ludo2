/**
 * @fileoverview gRPC-Web generated client stub for alphaludo
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: system.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var ludo_pb = require('./ludo_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.alphaludo = require('./system_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.GamesManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.GamesManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.alphaludo.FileName,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_GamesManager_Save = new grpc.web.MethodDescriptor(
  '/alphaludo.GamesManager/Save',
  grpc.web.MethodType.UNARY,
  proto.alphaludo.FileName,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.alphaludo.FileName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.GamesManagerClient.prototype.save =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.GamesManager/Save',
      request,
      metadata || {},
      methodDescriptor_GamesManager_Save,
      callback);
};


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.alphaludo.GamesManagerPromiseClient.prototype.save =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.GamesManager/Save',
      request,
      metadata || {},
      methodDescriptor_GamesManager_Save);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.alphaludo.FileNames>}
 */
const methodDescriptor_GamesManager_GetAll = new grpc.web.MethodDescriptor(
  '/alphaludo.GamesManager/GetAll',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.alphaludo.FileNames,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.FileNames.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.FileNames)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.FileNames>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.GamesManagerClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.GamesManager/GetAll',
      request,
      metadata || {},
      methodDescriptor_GamesManager_GetAll,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.FileNames>}
 *     Promise that resolves to the response
 */
proto.alphaludo.GamesManagerPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.GamesManager/GetAll',
      request,
      metadata || {},
      methodDescriptor_GamesManager_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.alphaludo.FileName,
 *   !proto.ludo.GameProto>}
 */
const methodDescriptor_GamesManager_Get = new grpc.web.MethodDescriptor(
  '/alphaludo.GamesManager/Get',
  grpc.web.MethodType.UNARY,
  proto.alphaludo.FileName,
  ludo_pb.GameProto,
  /**
   * @param {!proto.alphaludo.FileName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  ludo_pb.GameProto.deserializeBinary
);


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ludo.GameProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ludo.GameProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.GamesManagerClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.GamesManager/Get',
      request,
      metadata || {},
      methodDescriptor_GamesManager_Get,
      callback);
};


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ludo.GameProto>}
 *     Promise that resolves to the response
 */
proto.alphaludo.GamesManagerPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.GamesManager/Get',
      request,
      metadata || {},
      methodDescriptor_GamesManager_Get);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.PlayerManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.PlayerManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.alphaludo.FileName,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_PlayerManager_Save = new grpc.web.MethodDescriptor(
  '/alphaludo.PlayerManager/Save',
  grpc.web.MethodType.UNARY,
  proto.alphaludo.FileName,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.alphaludo.FileName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.PlayerManagerClient.prototype.save =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.PlayerManager/Save',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_Save,
      callback);
};


/**
 * @param {!proto.alphaludo.FileName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.alphaludo.PlayerManagerPromiseClient.prototype.save =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.PlayerManager/Save',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_Save);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.alphaludo.FileNames>}
 */
const methodDescriptor_PlayerManager_GetAll = new grpc.web.MethodDescriptor(
  '/alphaludo.PlayerManager/GetAll',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.alphaludo.FileNames,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.FileNames.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.FileNames)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.FileNames>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.PlayerManagerClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetAll',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetAll,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.FileNames>}
 *     Promise that resolves to the response
 */
proto.alphaludo.PlayerManagerPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetAll',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.alphaludo.FileName>}
 */
const methodDescriptor_PlayerManager_GetLatest = new grpc.web.MethodDescriptor(
  '/alphaludo.PlayerManager/GetLatest',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.alphaludo.FileName,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.FileName.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.FileName)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.FileName>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.PlayerManagerClient.prototype.getLatest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetLatest',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetLatest,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.FileName>}
 *     Promise that resolves to the response
 */
proto.alphaludo.PlayerManagerPromiseClient.prototype.getLatest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetLatest',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetLatest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.alphaludo.FileName>}
 */
const methodDescriptor_PlayerManager_GetRandom = new grpc.web.MethodDescriptor(
  '/alphaludo.PlayerManager/GetRandom',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.alphaludo.FileName,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.FileName.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.FileName)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.FileName>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.PlayerManagerClient.prototype.getRandom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetRandom',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetRandom,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.FileName>}
 *     Promise that resolves to the response
 */
proto.alphaludo.PlayerManagerPromiseClient.prototype.getRandom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.PlayerManager/GetRandom',
      request,
      metadata || {},
      methodDescriptor_PlayerManager_GetRandom);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.LiveplayManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.alphaludo.LiveplayManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_LiveplayManager_CheckRunningGame = new grpc.web.MethodDescriptor(
  '/alphaludo.LiveplayManager/CheckRunningGame',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.LiveplayManagerClient.prototype.checkRunningGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.LiveplayManager/CheckRunningGame',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_CheckRunningGame,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.alphaludo.LiveplayManagerPromiseClient.prototype.checkRunningGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.LiveplayManager/CheckRunningGame',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_CheckRunningGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_LiveplayManager_Reset = new grpc.web.MethodDescriptor(
  '/alphaludo.LiveplayManager/Reset',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.LiveplayManagerClient.prototype.reset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.LiveplayManager/Reset',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_Reset,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.alphaludo.LiveplayManagerPromiseClient.prototype.reset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.LiveplayManager/Reset',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_Reset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.alphaludo.NewGameConfig,
 *   !proto.alphaludo.StateResponse>}
 */
const methodDescriptor_LiveplayManager_CreateNewGame = new grpc.web.MethodDescriptor(
  '/alphaludo.LiveplayManager/CreateNewGame',
  grpc.web.MethodType.UNARY,
  proto.alphaludo.NewGameConfig,
  proto.alphaludo.StateResponse,
  /**
   * @param {!proto.alphaludo.NewGameConfig} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.StateResponse.deserializeBinary
);


/**
 * @param {!proto.alphaludo.NewGameConfig} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.StateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.StateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.LiveplayManagerClient.prototype.createNewGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.LiveplayManager/CreateNewGame',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_CreateNewGame,
      callback);
};


/**
 * @param {!proto.alphaludo.NewGameConfig} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.StateResponse>}
 *     Promise that resolves to the response
 */
proto.alphaludo.LiveplayManagerPromiseClient.prototype.createNewGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.LiveplayManager/CreateNewGame',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_CreateNewGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.alphaludo.StateResponse>}
 */
const methodDescriptor_LiveplayManager_GetCurrentState = new grpc.web.MethodDescriptor(
  '/alphaludo.LiveplayManager/GetCurrentState',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.alphaludo.StateResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.StateResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.StateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.StateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.LiveplayManagerClient.prototype.getCurrentState =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.LiveplayManager/GetCurrentState',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_GetCurrentState,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.StateResponse>}
 *     Promise that resolves to the response
 */
proto.alphaludo.LiveplayManagerPromiseClient.prototype.getCurrentState =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.LiveplayManager/GetCurrentState',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_GetCurrentState);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.alphaludo.MoveRequest,
 *   !proto.alphaludo.StateResponse>}
 */
const methodDescriptor_LiveplayManager_TakeMove = new grpc.web.MethodDescriptor(
  '/alphaludo.LiveplayManager/TakeMove',
  grpc.web.MethodType.UNARY,
  proto.alphaludo.MoveRequest,
  proto.alphaludo.StateResponse,
  /**
   * @param {!proto.alphaludo.MoveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.alphaludo.StateResponse.deserializeBinary
);


/**
 * @param {!proto.alphaludo.MoveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.alphaludo.StateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.alphaludo.StateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.alphaludo.LiveplayManagerClient.prototype.takeMove =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/alphaludo.LiveplayManager/TakeMove',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_TakeMove,
      callback);
};


/**
 * @param {!proto.alphaludo.MoveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.alphaludo.StateResponse>}
 *     Promise that resolves to the response
 */
proto.alphaludo.LiveplayManagerPromiseClient.prototype.takeMove =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/alphaludo.LiveplayManager/TakeMove',
      request,
      metadata || {},
      methodDescriptor_LiveplayManager_TakeMove);
};


module.exports = proto.alphaludo;

