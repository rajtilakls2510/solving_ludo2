// source: ludo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.ludo.BlockProto', null, global);
goog.exportSymbol('proto.ludo.ConfigProto', null, global);
goog.exportSymbol('proto.ludo.GameProto', null, global);
goog.exportSymbol('proto.ludo.MoveProto', null, global);
goog.exportSymbol('proto.ludo.StateProto', null, global);
goog.exportSymbol('proto.ludo.StatsProto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.BlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ludo.BlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.BlockProto.displayName = 'proto.ludo.BlockProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.StateProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ludo.StateProto.repeatedFields_, null);
};
goog.inherits(proto.ludo.StateProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.StateProto.displayName = 'proto.ludo.StateProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.MoveProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ludo.MoveProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.MoveProto.displayName = 'proto.ludo.MoveProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.ConfigProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ludo.ConfigProto.repeatedFields_, null);
};
goog.inherits(proto.ludo.ConfigProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.ConfigProto.displayName = 'proto.ludo.ConfigProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.StatsProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ludo.StatsProto.repeatedFields_, null);
};
goog.inherits(proto.ludo.StatsProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.StatsProto.displayName = 'proto.ludo.StatsProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ludo.GameProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ludo.GameProto.repeatedFields_, null);
};
goog.inherits(proto.ludo.GameProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ludo.GameProto.displayName = 'proto.ludo.GameProto';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.BlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.BlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.BlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.BlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    pawns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rigid: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.BlockProto}
 */
proto.ludo.BlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.BlockProto;
  return proto.ludo.BlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.BlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.BlockProto}
 */
proto.ludo.BlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPawns(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPos(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRigid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.BlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.BlockProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.BlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.BlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPawns();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRigid();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 pawns = 1;
 * @return {number}
 */
proto.ludo.BlockProto.prototype.getPawns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.BlockProto} returns this
 */
proto.ludo.BlockProto.prototype.setPawns = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 pos = 2;
 * @return {number}
 */
proto.ludo.BlockProto.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.BlockProto} returns this
 */
proto.ludo.BlockProto.prototype.setPos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool rigid = 3;
 * @return {boolean}
 */
proto.ludo.BlockProto.prototype.getRigid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ludo.BlockProto} returns this
 */
proto.ludo.BlockProto.prototype.setRigid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ludo.StateProto.repeatedFields_ = [7,9,10,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.StateProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.StateProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.StateProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.StateProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    nPlayers: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameOver: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    currentPlayer: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numMoreThrows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    diceRoll: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastMoveId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    playerPosPawnList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    numBlocks: jspb.Message.getFieldWithDefault(msg, 8, 0),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.ludo.BlockProto.toObject, includeInstance),
    previousPlayerPosPawnList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    previousNumBlocks: jspb.Message.getFieldWithDefault(msg, 11, 0),
    previousBlocksList: jspb.Message.toObjectList(msg.getPreviousBlocksList(),
    proto.ludo.BlockProto.toObject, includeInstance),
    hasPrevious: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.StateProto}
 */
proto.ludo.StateProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.StateProto;
  return proto.ludo.StateProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.StateProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.StateProto}
 */
proto.ludo.StateProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNPlayers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGameOver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentPlayer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumMoreThrows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiceRoll(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastMoveId(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPlayerPosPawn(values[i]);
      }
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumBlocks(value);
      break;
    case 9:
      var value = new proto.ludo.BlockProto;
      reader.readMessage(value,proto.ludo.BlockProto.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPreviousPlayerPosPawn(values[i]);
      }
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousNumBlocks(value);
      break;
    case 12:
      var value = new proto.ludo.BlockProto;
      reader.readMessage(value,proto.ludo.BlockProto.deserializeBinaryFromReader);
      msg.addPreviousBlocks(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPrevious(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.StateProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.StateProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.StateProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.StateProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNPlayers();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGameOver();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCurrentPlayer();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNumMoreThrows();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDiceRoll();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLastMoveId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPlayerPosPawnList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getNumBlocks();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ludo.BlockProto.serializeBinaryToWriter
    );
  }
  f = message.getPreviousPlayerPosPawnList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
  f = message.getPreviousNumBlocks();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPreviousBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.ludo.BlockProto.serializeBinaryToWriter
    );
  }
  f = message.getHasPrevious();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional int32 n_players = 1;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getNPlayers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setNPlayers = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool game_over = 2;
 * @return {boolean}
 */
proto.ludo.StateProto.prototype.getGameOver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setGameOver = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 current_player = 3;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getCurrentPlayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setCurrentPlayer = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_more_throws = 4;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getNumMoreThrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setNumMoreThrows = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 dice_roll = 5;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getDiceRoll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setDiceRoll = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 last_move_id = 6;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getLastMoveId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setLastMoveId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated int32 player_pos_pawn = 7;
 * @return {!Array<number>}
 */
proto.ludo.StateProto.prototype.getPlayerPosPawnList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setPlayerPosPawnList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.addPlayerPosPawn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.clearPlayerPosPawnList = function() {
  return this.setPlayerPosPawnList([]);
};


/**
 * optional int32 num_blocks = 8;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getNumBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setNumBlocks = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated BlockProto blocks = 9;
 * @return {!Array<!proto.ludo.BlockProto>}
 */
proto.ludo.StateProto.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.ludo.BlockProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.BlockProto, 9));
};


/**
 * @param {!Array<!proto.ludo.BlockProto>} value
 * @return {!proto.ludo.StateProto} returns this
*/
proto.ludo.StateProto.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ludo.BlockProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.BlockProto}
 */
proto.ludo.StateProto.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ludo.BlockProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * repeated int32 previous_player_pos_pawn = 10;
 * @return {!Array<number>}
 */
proto.ludo.StateProto.prototype.getPreviousPlayerPosPawnList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setPreviousPlayerPosPawnList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.addPreviousPlayerPosPawn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.clearPreviousPlayerPosPawnList = function() {
  return this.setPreviousPlayerPosPawnList([]);
};


/**
 * optional int32 previous_num_blocks = 11;
 * @return {number}
 */
proto.ludo.StateProto.prototype.getPreviousNumBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setPreviousNumBlocks = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated BlockProto previous_blocks = 12;
 * @return {!Array<!proto.ludo.BlockProto>}
 */
proto.ludo.StateProto.prototype.getPreviousBlocksList = function() {
  return /** @type{!Array<!proto.ludo.BlockProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.BlockProto, 12));
};


/**
 * @param {!Array<!proto.ludo.BlockProto>} value
 * @return {!proto.ludo.StateProto} returns this
*/
proto.ludo.StateProto.prototype.setPreviousBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.ludo.BlockProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.BlockProto}
 */
proto.ludo.StateProto.prototype.addPreviousBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.ludo.BlockProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.clearPreviousBlocksList = function() {
  return this.setPreviousBlocksList([]);
};


/**
 * optional bool has_previous = 13;
 * @return {boolean}
 */
proto.ludo.StateProto.prototype.getHasPrevious = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ludo.StateProto} returns this
 */
proto.ludo.StateProto.prototype.setHasPrevious = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.MoveProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.MoveProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.MoveProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.MoveProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    pawn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentPos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    destination: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.MoveProto}
 */
proto.ludo.MoveProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.MoveProto;
  return proto.ludo.MoveProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.MoveProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.MoveProto}
 */
proto.ludo.MoveProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPawn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.MoveProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.MoveProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.MoveProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.MoveProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPawn();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurrentPos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDestination();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 pawn = 1;
 * @return {number}
 */
proto.ludo.MoveProto.prototype.getPawn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.MoveProto} returns this
 */
proto.ludo.MoveProto.prototype.setPawn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 current_pos = 2;
 * @return {number}
 */
proto.ludo.MoveProto.prototype.getCurrentPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.MoveProto} returns this
 */
proto.ludo.MoveProto.prototype.setCurrentPos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 destination = 3;
 * @return {number}
 */
proto.ludo.MoveProto.prototype.getDestination = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.MoveProto} returns this
 */
proto.ludo.MoveProto.prototype.setDestination = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ludo.ConfigProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.ConfigProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.ConfigProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.ConfigProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.ConfigProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    nPlayers: jspb.Message.getFieldWithDefault(msg, 1, 0),
    colourPlayerList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.ConfigProto}
 */
proto.ludo.ConfigProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.ConfigProto;
  return proto.ludo.ConfigProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.ConfigProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.ConfigProto}
 */
proto.ludo.ConfigProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNPlayers(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColourPlayer(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.ConfigProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.ConfigProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.ConfigProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.ConfigProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNPlayers();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColourPlayerList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 n_players = 1;
 * @return {number}
 */
proto.ludo.ConfigProto.prototype.getNPlayers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.ConfigProto} returns this
 */
proto.ludo.ConfigProto.prototype.setNPlayers = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 colour_player = 2;
 * @return {!Array<number>}
 */
proto.ludo.ConfigProto.prototype.getColourPlayerList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.ConfigProto} returns this
 */
proto.ludo.ConfigProto.prototype.setColourPlayerList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.ConfigProto} returns this
 */
proto.ludo.ConfigProto.prototype.addColourPlayer = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.ConfigProto} returns this
 */
proto.ludo.ConfigProto.prototype.clearColourPlayerList = function() {
  return this.setColourPlayerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ludo.StatsProto.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.StatsProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.StatsProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.StatsProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.StatsProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    pList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    nList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    qList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    piList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    movesList: jspb.Message.toObjectList(msg.getMovesList(),
    proto.ludo.MoveProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.StatsProto}
 */
proto.ludo.StatsProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.StatsProto;
  return proto.ludo.StatsProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.StatsProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.StatsProto}
 */
proto.ludo.StatsProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addP(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addN(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addQ(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPi(values[i]);
      }
      break;
    case 5:
      var value = new proto.ludo.MoveProto;
      reader.readMessage(value,proto.ludo.MoveProto.deserializeBinaryFromReader);
      msg.addMoves(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.StatsProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.StatsProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.StatsProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.StatsProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getNList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getQList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getPiList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getMovesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ludo.MoveProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated float p = 1;
 * @return {!Array<number>}
 */
proto.ludo.StatsProto.prototype.getPList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.setPList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.addP = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.clearPList = function() {
  return this.setPList([]);
};


/**
 * repeated int32 n = 2;
 * @return {!Array<number>}
 */
proto.ludo.StatsProto.prototype.getNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.setNList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.addN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.clearNList = function() {
  return this.setNList([]);
};


/**
 * repeated float q = 3;
 * @return {!Array<number>}
 */
proto.ludo.StatsProto.prototype.getQList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.setQList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.addQ = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.clearQList = function() {
  return this.setQList([]);
};


/**
 * repeated float pi = 4;
 * @return {!Array<number>}
 */
proto.ludo.StatsProto.prototype.getPiList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.setPiList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.addPi = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.clearPiList = function() {
  return this.setPiList([]);
};


/**
 * repeated MoveProto moves = 5;
 * @return {!Array<!proto.ludo.MoveProto>}
 */
proto.ludo.StatsProto.prototype.getMovesList = function() {
  return /** @type{!Array<!proto.ludo.MoveProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.MoveProto, 5));
};


/**
 * @param {!Array<!proto.ludo.MoveProto>} value
 * @return {!proto.ludo.StatsProto} returns this
*/
proto.ludo.StatsProto.prototype.setMovesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ludo.MoveProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.MoveProto}
 */
proto.ludo.StatsProto.prototype.addMoves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ludo.MoveProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.StatsProto} returns this
 */
proto.ludo.StatsProto.prototype.clearMovesList = function() {
  return this.setMovesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ludo.GameProto.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ludo.GameProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ludo.GameProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ludo.GameProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.GameProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ludo.ConfigProto.toObject(includeInstance, f),
    statesList: jspb.Message.toObjectList(msg.getStatesList(),
    proto.ludo.StateProto.toObject, includeInstance),
    movesList: jspb.Message.toObjectList(msg.getMovesList(),
    proto.ludo.MoveProto.toObject, includeInstance),
    winner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    statsList: jspb.Message.toObjectList(msg.getStatsList(),
    proto.ludo.StatsProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ludo.GameProto}
 */
proto.ludo.GameProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ludo.GameProto;
  return proto.ludo.GameProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ludo.GameProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ludo.GameProto}
 */
proto.ludo.GameProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ludo.ConfigProto;
      reader.readMessage(value,proto.ludo.ConfigProto.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.ludo.StateProto;
      reader.readMessage(value,proto.ludo.StateProto.deserializeBinaryFromReader);
      msg.addStates(value);
      break;
    case 3:
      var value = new proto.ludo.MoveProto;
      reader.readMessage(value,proto.ludo.MoveProto.deserializeBinaryFromReader);
      msg.addMoves(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinner(value);
      break;
    case 5:
      var value = new proto.ludo.StatsProto;
      reader.readMessage(value,proto.ludo.StatsProto.deserializeBinaryFromReader);
      msg.addStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ludo.GameProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ludo.GameProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ludo.GameProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ludo.GameProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ludo.ConfigProto.serializeBinaryToWriter
    );
  }
  f = message.getStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ludo.StateProto.serializeBinaryToWriter
    );
  }
  f = message.getMovesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ludo.MoveProto.serializeBinaryToWriter
    );
  }
  f = message.getWinner();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ludo.StatsProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigProto config = 1;
 * @return {?proto.ludo.ConfigProto}
 */
proto.ludo.GameProto.prototype.getConfig = function() {
  return /** @type{?proto.ludo.ConfigProto} */ (
    jspb.Message.getWrapperField(this, proto.ludo.ConfigProto, 1));
};


/**
 * @param {?proto.ludo.ConfigProto|undefined} value
 * @return {!proto.ludo.GameProto} returns this
*/
proto.ludo.GameProto.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ludo.GameProto} returns this
 */
proto.ludo.GameProto.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ludo.GameProto.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StateProto states = 2;
 * @return {!Array<!proto.ludo.StateProto>}
 */
proto.ludo.GameProto.prototype.getStatesList = function() {
  return /** @type{!Array<!proto.ludo.StateProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.StateProto, 2));
};


/**
 * @param {!Array<!proto.ludo.StateProto>} value
 * @return {!proto.ludo.GameProto} returns this
*/
proto.ludo.GameProto.prototype.setStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ludo.StateProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.StateProto}
 */
proto.ludo.GameProto.prototype.addStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ludo.StateProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.GameProto} returns this
 */
proto.ludo.GameProto.prototype.clearStatesList = function() {
  return this.setStatesList([]);
};


/**
 * repeated MoveProto moves = 3;
 * @return {!Array<!proto.ludo.MoveProto>}
 */
proto.ludo.GameProto.prototype.getMovesList = function() {
  return /** @type{!Array<!proto.ludo.MoveProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.MoveProto, 3));
};


/**
 * @param {!Array<!proto.ludo.MoveProto>} value
 * @return {!proto.ludo.GameProto} returns this
*/
proto.ludo.GameProto.prototype.setMovesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ludo.MoveProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.MoveProto}
 */
proto.ludo.GameProto.prototype.addMoves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ludo.MoveProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.GameProto} returns this
 */
proto.ludo.GameProto.prototype.clearMovesList = function() {
  return this.setMovesList([]);
};


/**
 * optional int32 winner = 4;
 * @return {number}
 */
proto.ludo.GameProto.prototype.getWinner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ludo.GameProto} returns this
 */
proto.ludo.GameProto.prototype.setWinner = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated StatsProto stats = 5;
 * @return {!Array<!proto.ludo.StatsProto>}
 */
proto.ludo.GameProto.prototype.getStatsList = function() {
  return /** @type{!Array<!proto.ludo.StatsProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ludo.StatsProto, 5));
};


/**
 * @param {!Array<!proto.ludo.StatsProto>} value
 * @return {!proto.ludo.GameProto} returns this
*/
proto.ludo.GameProto.prototype.setStatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ludo.StatsProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ludo.StatsProto}
 */
proto.ludo.GameProto.prototype.addStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ludo.StatsProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ludo.GameProto} returns this
 */
proto.ludo.GameProto.prototype.clearStatsList = function() {
  return this.setStatsList([]);
};


goog.object.extend(exports, proto.ludo);
